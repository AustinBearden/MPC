project : glib {
  requires      += wireshark_any

  // Unfortunately Wireshark does not install headers for plugin
  // development; instead we rely on the source distribution:
  includes      += $(WIRESHARK_SRC)

  specific(vc71) {
    macros      += MSC_VER_REQUIRED=1310
  }
  specific(vc8) {
    macros      += MSC_VER_REQUIRED=1400
  }
  specific(vc9) {
    macros      += MSC_VER_REQUIRED=1500
  }
  specific(vc10) {
    macros      += MSC_VER_REQUIRED=1600
  }
  specific(vc11) {
    macros      += MSC_VER_REQUIRED=1700
  }
  specific(vc12) {
    macros      += MSC_VER_REQUIRED=1800
  }
  specific(vc14) {
    macros      += MSC_VER_REQUIRED=1900
  }
  specific(vs2017) {
    macros      += MSC_VER_REQUIRED=1910
  }
  verbatim(nmake, top) {
    include $(WIRESHARK_SRC)/config.nmake
  }
  
  specific(!prop:windows) {
    libpaths    += $(WIRESHARK_SRC)/wiretap/.libs $(WIRESHARK_SRC)/epan/.libs
    lit_libs    += wiretap wireshark
  }
}

feature (wireshark) {
  specific(prop:windows) {
    libpaths    += $(WIRESHARK_SRC)/wiretap $(WIRESHARK_SRC)/epan
    lit_libs    += wiretap-$(WIRETAP_VERSION) libwireshark
  }
}

// Building Wireshark 2 on Windows is a CMake out of source build
// WIRESHARK2_BUILD is the build folder
// WIRESHARK2_BIN is the relative folder in the build where the executables
//   and libraries were placed. This is likely "run\RelWithDebInfo" but is
//   left as an option in case the build configuration is different.
feature (wireshark2) {
  specific(prop:windows) {
    includes    += $(WIRESHARK2_BUILD)
    libpaths    += $(WIRESHARK2_BIN)
    lit_libs    += wiretap wireshark wsutil
  }
}